"use strict";
var e_1, _a;
Object.defineProperty(exports, "__esModule", { value: true });
var platform_1 = require("@nativescript/core/platform");
var view_1 = require("@nativescript/core/ui/core/view");
var view_common_1 = require("@nativescript/core/ui/core/view/view-common");
exports.ViewCommon = view_common_1.ViewCommon;
var helpers_1 = require("../../utils/helpers");
var AccessibilityTrait;
(function (AccessibilityTrait) {
    AccessibilityTrait["None"] = "none";
    AccessibilityTrait["Button"] = "button";
    AccessibilityTrait["Link"] = "link";
    AccessibilityTrait["SearchField"] = "search";
    AccessibilityTrait["Image"] = "image";
    AccessibilityTrait["Selected"] = "selected";
    AccessibilityTrait["PlaysSound"] = "plays";
    AccessibilityTrait["KeyboardKey"] = "key";
    AccessibilityTrait["StaticText"] = "text";
    AccessibilityTrait["SummaryElement"] = "summary";
    AccessibilityTrait["NotEnabled"] = "disabled";
    AccessibilityTrait["UpdatesFrequently"] = "frequentUpdates";
    AccessibilityTrait["StartsMediaSession"] = "startsMedia";
    AccessibilityTrait["Adjustable"] = "adjustable";
    AccessibilityTrait["AllowsDirectInteraction"] = "allowsDirectInteraction";
    AccessibilityTrait["CausesPageTurn"] = "pageTurn";
    AccessibilityTrait["Header"] = "header";
})(AccessibilityTrait = exports.AccessibilityTrait || (exports.AccessibilityTrait = {}));
var AccessibilityRole;
(function (AccessibilityRole) {
    AccessibilityRole["None"] = "none";
    AccessibilityRole["Button"] = "button";
    AccessibilityRole["Link"] = "link";
    AccessibilityRole["Search"] = "search";
    AccessibilityRole["Image"] = "image";
    AccessibilityRole["ImageButton"] = "image_button";
    AccessibilityRole["KeyboardKey"] = "keyboard_key";
    AccessibilityRole["StaticText"] = "text_field";
    AccessibilityRole["Adjustable"] = "adjustable";
    AccessibilityRole["Summary"] = "summery";
    AccessibilityRole["Header"] = "header";
    AccessibilityRole["Checkbox"] = "checkbox";
    AccessibilityRole["ProgressBar"] = "progress_bar";
    AccessibilityRole["RadioButton"] = "radiobutton";
    AccessibilityRole["SpinButton"] = "spin_button";
    AccessibilityRole["Switch"] = "switch";
})(AccessibilityRole = exports.AccessibilityRole || (exports.AccessibilityRole = {}));
var AccessibilityState;
(function (AccessibilityState) {
    AccessibilityState["Selected"] = "selected";
    AccessibilityState["Checked"] = "checked";
    AccessibilityState["Unchecked"] = "unchecked";
    AccessibilityState["Disabled"] = "disabled";
})(AccessibilityState = exports.AccessibilityState || (exports.AccessibilityState = {}));
var AccessibilityLiveRegion;
(function (AccessibilityLiveRegion) {
    AccessibilityLiveRegion["None"] = "none";
    AccessibilityLiveRegion["Polite"] = "polite";
    AccessibilityLiveRegion["Assertive"] = "assertive";
})(AccessibilityLiveRegion = exports.AccessibilityLiveRegion || (exports.AccessibilityLiveRegion = {}));
exports.commonFunctions = {
    accessibilityAnnouncement: 'accessibilityAnnouncement',
    accessibilityScreenChanged: 'accessibilityScreenChanged',
};
exports.iosFunctions = {
    iosPostAccessibilityNotification: 'iosPostAccessibilityNotification',
};
exports.androidFunctions = {
    androidSendAccessibilityEvent: 'androidSendAccessibilityEvent',
};
exports.allFunctions = __assign({}, exports.commonFunctions, exports.iosFunctions, exports.androidFunctions);
try {
    for (var _b = __values(Object.keys(exports.allFunctions)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var fnName = _c.value;
        helpers_1.setViewFunction(view_common_1.ViewCommon, fnName);
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    }
    finally { if (e_1) throw e_1.error; }
}
helpers_1.setViewFunction(view_common_1.ViewCommon, 'postAccessibilityNotification', function (notificationType, msg) {
    console.warn("DEPRECATED: " + this + ".postAccessibilityNotification is no longer supported. Please use \"" + exports.iosFunctions.iosPostAccessibilityNotification + "\"");
    this[exports.iosFunctions.iosPostAccessibilityNotification](notificationType, msg);
});
helpers_1.setViewFunction(view_common_1.ViewCommon, 'sendAccessibilityEvent', function (eventName, text) {
    console.warn("DEPRECATED: " + this + ".sendAccessibilityEvent is no longer supported. Please use \"" + exports.androidFunctions.androidSendAccessibilityEvent + "\"");
    this[exports.androidFunctions.androidSendAccessibilityEvent](eventName, text);
});
var accessiblePropertyName = 'accessible';
var accessibleCssName = 'a11y-enabled';
var accessibilityHiddenPropertyName = 'accessibilityHidden';
var accessibilityHiddenCssName = 'a11y-hidden';
var accessibilityIdPropertyName = 'accessibilityIdentifier';
var accessibilityRolePropertyName = 'accessibilityRole';
var accessibilityRoleCssName = 'a11y-role';
var accessibilityStatePropertyName = 'accessibilityState';
var accessibilityStateCssName = 'a11y-state';
var accessibilityLabelPropertyName = 'accessibilityLabel';
var accessibilityValuePropertyName = 'accessibilityValue';
var accessibilityHintPropertyName = 'accessibilityHint';
var accessibilityLiveRegionPropertyName = 'accessibilityLiveRegion';
var accessibilityLiveRegionCssName = 'a11y-live-region';
var accessibilityTraitsPropertyName = 'accessibilityTraits';
var accessibilityLanguagePropertyName = 'accessibilityLanguage';
var accessibilityLanguageCssName = 'a11y-lang';
var accessibilityMediaSessionPropertyName = 'accessibilityMediaSession';
var accessibilityMediaSessionCssName = 'a11y-media-session';
exports.accessibleCssProperty = helpers_1.addBooleanCssPropertyToView(view_common_1.ViewCommon, accessiblePropertyName, accessibleCssName);
exports.accessibilityIdProperty = helpers_1.addPropertyToView(view_common_1.ViewCommon, accessibilityIdPropertyName);
exports.accessibilityRoleCssProperty = helpers_1.addCssPropertyToView(view_common_1.ViewCommon, accessibilityRolePropertyName, accessibilityRoleCssName, false, undefined, helpers_1.makePropertyEnumConverter(AccessibilityRole));
exports.accessibilityStateCssProperty = helpers_1.addCssPropertyToView(view_common_1.ViewCommon, accessibilityStatePropertyName, accessibilityStateCssName, false, undefined, helpers_1.makePropertyEnumConverter(AccessibilityState));
exports.accessibilityLabelProperty = helpers_1.addPropertyToView(view_common_1.ViewCommon, accessibilityLabelPropertyName);
exports.accessibilityValueProperty = helpers_1.addPropertyToView(view_common_1.ViewCommon, accessibilityValuePropertyName);
exports.accessibilityHintProperty = helpers_1.addPropertyToView(view_common_1.ViewCommon, accessibilityHintPropertyName);
exports.accessibilityHiddenCssProperty = helpers_1.addBooleanCssPropertyToView(view_common_1.ViewCommon, accessibilityHiddenPropertyName, accessibilityHiddenCssName, !!platform_1.isIOS);
exports.accessibilityLiveRegionCssProperty = helpers_1.addCssPropertyToView(view_common_1.ViewCommon, accessibilityLiveRegionPropertyName, accessibilityLiveRegionCssName, false, 'none', function (value) {
    switch (("" + value).toLowerCase()) {
        case 'none': {
            return 'none';
        }
        case 'polite': {
            return 'polite';
        }
        case 'assertive': {
            return 'assertive';
        }
    }
    return 'none';
});
exports.accessibilityTraitsProperty = helpers_1.addPropertyToView(view_common_1.ViewCommon, accessibilityTraitsPropertyName);
exports.accessibilityLanguageProperty = helpers_1.addCssPropertyToView(view_common_1.ViewCommon, accessibilityLanguagePropertyName, accessibilityLanguageCssName);
exports.accessibilityMediaSessionCssProperty = helpers_1.addBooleanCssPropertyToView(view_common_1.ViewCommon, accessibilityMediaSessionPropertyName, accessibilityMediaSessionCssName, false);
Object.defineProperties(view_1.View, {
    accessibilityFocusEvent: {
        configurable: true,
        get: function () {
            return 'accessibilityFocus';
        },
    },
    accessibilityBlurEvent: {
        configurable: true,
        get: function () {
            return 'accessibilityBlur';
        },
    },
    accessibilityFocusChangedEvent: {
        configurable: true,
        get: function () {
            return 'accessibilityFocusChanged';
        },
    },
    AccessibilityTrait: {
        configurable: true,
        get: function () {
            return AccessibilityTrait;
        },
    },
    AccessibilityComponentType: {
        configurable: true,
        get: function () {
            return AccessibilityRole;
        },
    },
    AccessibilityState: {
        configurable: true,
        get: function () {
            return AccessibilityState;
        },
    },
});
Object.defineProperties(view_1.View.prototype, {
    importantForAccessibility: {
        configurable: true,
        get: function () {
            return null;
        },
        set: function (value) {
            console.warn("DEPRECATED: " + this + ".importantForAccessibility = \"" + value + "\" is no longer supported. Please use \"" + accessibilityHiddenPropertyName + "\"");
            if (value && value !== 'yes') {
                this[accessibilityHiddenPropertyName] = true;
            }
        },
    },
    accessibilityElementsHidden: {
        configurable: true,
        get: function () {
            return null;
        },
        set: function (value) {
            console.warn("DEPRECATED: " + this + ".accessibilityElementsHidden = \"" + value + "\" is no longer supported. Please use \"" + accessibilityHiddenPropertyName + "\"");
            this[accessibilityHiddenPropertyName] = !!value;
        },
    },
    accessibilityComponentType: {
        configurable: true,
        get: function () {
            return this[accessibilityRolePropertyName];
        },
        set: function (value) {
            console.warn("DEPRECATED: " + this + ".accessibilityComponentType = \"" + value + "\" is no longer supported. Please use \"" + accessibilityRolePropertyName + "\"");
            if (value === 'radiobutton_checked') {
                this[accessibilityRolePropertyName] = AccessibilityRole.RadioButton;
                this[accessibilityStatePropertyName] = AccessibilityState.Checked;
            }
            else if (value === 'radiobutton_unchecked') {
                this[accessibilityRolePropertyName] = AccessibilityRole.RadioButton;
                this[accessibilityStatePropertyName] = AccessibilityState.Unchecked;
            }
            else {
                this[accessibilityRolePropertyName] = value;
            }
        },
    },
});
//# sourceMappingURL=data:application/json;base64,
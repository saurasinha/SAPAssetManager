"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nsApp = require("@nativescript/core/application");
var profiling_1 = require("@nativescript/core/profiling");
var view_1 = require("@nativescript/core/ui/core/view");
var proxy_view_container_1 = require("@nativescript/core/ui/proxy-view-container");
var view_common_1 = require("../ui/core/view-common");
var helpers_1 = require("./helpers");
function getAndroidView(tnsView) {
    throw new Error("getAndroidView(" + tnsView + ") - should never be called on iOS");
}
exports.getAndroidView = getAndroidView;
function getUIView(view) {
    return view.ios;
}
exports.getUIView = getUIView;
var AccessibilityTraitsMap;
var RoleTypeMap;
var nativeFocusedNotificationObserver;
var uiViewToTnsView = new WeakMap();
var lastFocusedView;
function ensureNativeClasses() {
    if (AccessibilityTraitsMap && nativeFocusedNotificationObserver) {
        return;
    }
    AccessibilityTraitsMap = new Map([
        [view_common_1.AccessibilityTrait.None, UIAccessibilityTraitNone],
        [view_common_1.AccessibilityTrait.Button, UIAccessibilityTraitButton],
        [view_common_1.AccessibilityTrait.Link, UIAccessibilityTraitLink],
        [view_common_1.AccessibilityTrait.SearchField, UIAccessibilityTraitSearchField],
        [view_common_1.AccessibilityTrait.Image, UIAccessibilityTraitImage],
        [view_common_1.AccessibilityTrait.Selected, UIAccessibilityTraitSelected],
        [view_common_1.AccessibilityTrait.PlaysSound, UIAccessibilityTraitPlaysSound],
        [view_common_1.AccessibilityTrait.StaticText, UIAccessibilityTraitStaticText],
        [view_common_1.AccessibilityTrait.SummaryElement, UIAccessibilityTraitSummaryElement],
        [view_common_1.AccessibilityTrait.NotEnabled, UIAccessibilityTraitNotEnabled],
        [view_common_1.AccessibilityTrait.UpdatesFrequently, UIAccessibilityTraitUpdatesFrequently],
        [view_common_1.AccessibilityTrait.StartsMediaSession, UIAccessibilityTraitStartsMediaSession],
        [view_common_1.AccessibilityTrait.Adjustable, UIAccessibilityTraitAdjustable],
        [view_common_1.AccessibilityTrait.AllowsDirectInteraction, UIAccessibilityTraitAllowsDirectInteraction],
        [view_common_1.AccessibilityTrait.CausesPageTurn, UIAccessibilityTraitCausesPageTurn],
        [view_common_1.AccessibilityTrait.Header, UIAccessibilityTraitHeader],
    ]);
    RoleTypeMap = new Map([
        [view_common_1.AccessibilityRole.Button, UIAccessibilityTraitButton],
        [view_common_1.AccessibilityRole.Header, UIAccessibilityTraitHeader],
        [view_common_1.AccessibilityRole.Link, UIAccessibilityTraitLink],
        [view_common_1.AccessibilityRole.Search, UIAccessibilityTraitSearchField],
        [view_common_1.AccessibilityRole.Image, UIAccessibilityTraitImage],
        [view_common_1.AccessibilityRole.ImageButton, UIAccessibilityTraitImage | UIAccessibilityTraitButton],
        [view_common_1.AccessibilityRole.KeyboardKey, UIAccessibilityTraitKeyboardKey],
        [view_common_1.AccessibilityRole.StaticText, UIAccessibilityTraitStaticText],
        [view_common_1.AccessibilityRole.Summary, UIAccessibilityTraitSummaryElement],
        [view_common_1.AccessibilityRole.Adjustable, UIAccessibilityTraitAdjustable],
        [view_common_1.AccessibilityRole.Checkbox, UIAccessibilityTraitButton],
        [view_common_1.AccessibilityRole.Switch, UIAccessibilityTraitButton],
        [view_common_1.AccessibilityRole.RadioButton, UIAccessibilityTraitButton],
    ]);
    nativeFocusedNotificationObserver = nsApp.ios.addNotificationObserver(UIAccessibilityElementFocusedNotification, function (args) {
        var uiView = args.userInfo.objectForKey(UIAccessibilityFocusedElementKey);
        var tnsView = uiViewToTnsView.has(uiView) ? uiViewToTnsView.get(uiView).get() : null;
        if (!tnsView) {
            return;
        }
        var lastView = lastFocusedView && lastFocusedView.get();
        if (lastView && tnsView !== lastView) {
            var lastFocusedUIView = getUIView(lastView);
            if (lastFocusedUIView) {
                lastFocusedView = null;
                helpers_1.notifyAccessibilityFocusState(lastView, false, true);
            }
        }
        lastFocusedView = new WeakRef(tnsView);
        helpers_1.notifyAccessibilityFocusState(tnsView, true, false);
    });
    nsApp.on(nsApp.exitEvent, function () {
        if (nativeFocusedNotificationObserver) {
            nsApp.ios.removeNotificationObserver(nativeFocusedNotificationObserver, UIAccessibilityElementFocusedNotification);
        }
        nativeFocusedNotificationObserver = null;
    });
}
var AccessibilityHelper = (function () {
    function AccessibilityHelper() {
    }
    AccessibilityHelper.updateAccessibilityProperties = function (tnsView) {
        if (tnsView instanceof proxy_view_container_1.ProxyViewContainer) {
            return;
        }
        var uiView = getUIView(tnsView);
        if (!uiView) {
            return;
        }
        ensureNativeClasses();
        var accessibilityRole = tnsView.accessibilityRole;
        var accessibilityState = tnsView.accessibilityState;
        if (!tnsView.accessible || tnsView.accessibilityHidden) {
            uiView.accessibilityTraits = UIAccessibilityTraitNone;
            return;
        }
        var a11yTraits = UIAccessibilityTraitNone;
        if (RoleTypeMap.has(accessibilityRole)) {
            a11yTraits |= RoleTypeMap.get(accessibilityRole);
        }
        switch (accessibilityRole) {
            case view_common_1.AccessibilityRole.Checkbox:
            case view_common_1.AccessibilityRole.RadioButton:
            case view_common_1.AccessibilityRole.Switch: {
                if (accessibilityState === view_common_1.AccessibilityState.Checked) {
                    a11yTraits |= AccessibilityTraitsMap.get(view_common_1.AccessibilityTrait.Selected);
                }
                break;
            }
            default: {
                if (accessibilityState === view_common_1.AccessibilityState.Selected) {
                    a11yTraits |= AccessibilityTraitsMap.get(view_common_1.AccessibilityTrait.Selected);
                }
                if (accessibilityState === view_common_1.AccessibilityState.Disabled) {
                    a11yTraits |= AccessibilityTraitsMap.get(view_common_1.AccessibilityTrait.NotEnabled);
                }
                break;
            }
        }
        var UpdatesFrequentlyTrait = AccessibilityTraitsMap.get(view_common_1.AccessibilityTrait.UpdatesFrequently);
        switch (tnsView.accessibilityLiveRegion) {
            case view_common_1.AccessibilityLiveRegion.Polite:
            case view_common_1.AccessibilityLiveRegion.Assertive: {
                a11yTraits |= UpdatesFrequentlyTrait;
                break;
            }
            default: {
                a11yTraits &= ~UpdatesFrequentlyTrait;
                break;
            }
        }
        if (tnsView.accessibilityMediaSession) {
            a11yTraits |= AccessibilityTraitsMap.get(view_common_1.AccessibilityTrait.StartsMediaSession);
        }
        if (tnsView.accessibilityTraits) {
            a11yTraits |= helpers_1.inputArrayToBitMask(tnsView.accessibilityTraits, AccessibilityTraitsMap);
        }
        uiView.accessibilityTraits = a11yTraits;
    };
    AccessibilityHelper.sendAccessibilityEvent = function (tnsView, eventName, text) {
        throw new Error('AccessibilityHelper.sendAccessibilityEvent() - Should never be called on iOS');
    };
    AccessibilityHelper.updateContentDescription = function (tnsView, forceUpdate) {
        throw new Error('AccessibilityHelper.updateContentDescription() . Should never be called on iOS');
    };
    __decorate([
        profiling_1.profile,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [view_1.View]),
        __metadata("design:returntype", void 0)
    ], AccessibilityHelper, "updateAccessibilityProperties", null);
    return AccessibilityHelper;
}());
exports.AccessibilityHelper = AccessibilityHelper;
helpers_1.hmrSafeEvents('A11YHelper:loadedEvent', [view_1.View.loadedEvent], view_1.View, function (evt) {
    var tnsView = evt.object;
    if (!tnsView) {
        return;
    }
    if (tnsView instanceof proxy_view_container_1.ProxyViewContainer) {
        return;
    }
    var uiView = getUIView(tnsView);
    if (!uiView) {
        return;
    }
    uiViewToTnsView.set(uiView, new WeakRef(tnsView));
});
//# sourceMappingURL=data:application/json;base64,
import { SectionBridge } from 'mdk-sap';
import { IMDKViewFacade } from '../IMDKViewFacade';
import { IView } from '../IView';
import { BaseSectionObservable } from '../observables/sections/BaseSectionObservable';
export declare abstract class BaseSection {
    protected _observable: BaseSectionObservable;
    protected _props: any;
    protected _sectionBridge: SectionBridge;
    protected _extensions: IView[];
    private _nativeSection;
    private _oldVisible;
    constructor(props: any);
    readonly binding: any;
    readonly context: any;
    readonly definition: any;
    disposeNativeSection(): void;
    nativeSection: any;
    readonly staticSection: any;
    readonly visible: boolean;
    dynamicVisible: boolean;
    sectionDataSubscriptions: string[];
    getTargetSpecifier(): any;
    setTargetSpecifier(targetSpecifier: any, redraw: boolean): Promise<any>;
    initialize(): any;
    destroy(): void;
    readonly page: any;
    readonly table: any;
    readonly extensions: IView[];
    observable(): any;
    footerTapped(): Promise<void>;
    getItem(row: any): void;
    getBoundData(row: any): any;
    getView(row: any): void;
    onPress(cell: any, viewFacade: IMDKViewFacade): void;
    onAccessoryButtonPress(cell: any, viewFacade: IMDKViewFacade): void;
    onItemPress(item: any): void;
    searchUpdated(searchText: any): void;
    updateActionBarElevation(on: any): void;
    viewDidAppear(): void;
    resetFlag(): void;
    redraw(data: any): Promise<any>;
    reloadData(itemCount: any): void;
    reloadRow(index: number): void;
    updateRow(index: number, data: any): void;
    readonly isSection: boolean;
    readonly isBindable: boolean;
    readonly isSelectable: boolean;
    readonly value: any;
    onDisplayingModal(isFullPage: boolean): void;
    onDismissingModal(): void;
    onNavigatedFrom(pageExists: boolean): void;
    onNavigatedTo(initialLoading: boolean): void;
    onNavigatingFrom(pageExists: boolean): void;
    onNavigatingTo(initialLoading: boolean): void;
    onPageUnloaded(pageExists: boolean): void;
    onPageLoaded(initialLoading: boolean): void;
    protected abstract _createObservable(): any;
    protected _handleEvent(sHandler: string): Promise<void>;
}
export declare function isSection(element: BaseSection): boolean;
export declare function isBindableSection(element: BaseSection): boolean;
export declare function isSelectableSection(element: BaseSection): boolean;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var profiling_1 = require("@nativescript/core/profiling");
var view_1 = require("@nativescript/core/ui/core/view");
var trace_1 = require("../../trace");
var AccessibilityHelper_1 = require("../../utils/AccessibilityHelper");
var helpers_1 = require("../../utils/helpers");
var view_common_1 = require("./view-common");
view_1.View.prototype[view_common_1.accessibilityHiddenCssProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityHiddenSetNative', function accessibilityHiddenSetNative(isHidden) {
    var androidView = AccessibilityHelper_1.getAndroidView(this);
    if (!androidView) {
        return;
    }
    if (isHidden) {
        if (trace_1.isTraceEnabled()) {
            trace_1.writeTrace("View<" + this + ".android>.accessibilityHidden - hide element");
        }
        androidView.setImportantForAccessibility(android.view.View.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS);
    }
    else {
        if (trace_1.isTraceEnabled()) {
            trace_1.writeTrace("View<" + this + ".android>.accessibilityHidden - show element");
        }
        androidView.setImportantForAccessibility(android.view.View.IMPORTANT_FOR_ACCESSIBILITY_YES);
    }
});
view_1.View.prototype[view_common_1.accessibilityRoleCssProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityComponentTypeSetNative', function accessibilityComponentTypeSetNative(value) {
    var androidView = AccessibilityHelper_1.getAndroidView(this);
    if (!androidView) {
        return;
    }
    AccessibilityHelper_1.AccessibilityHelper.updateAccessibilityProperties(this);
    if (android.os.Build.VERSION.SDK_INT >= 28) {
        androidView.setAccessibilityHeading(value === view_common_1.AccessibilityRole.Header);
    }
});
view_1.View.prototype[view_common_1.accessibilityStateCssProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityStateSetNative', function accessibilityStateSetNative() {
    AccessibilityHelper_1.AccessibilityHelper.updateAccessibilityProperties(this);
});
view_1.View.prototype[view_common_1.accessibilityLiveRegionCssProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityLiveRegionSetNative', function accessibilityLiveRegionSetNative(value) {
    var androidView = AccessibilityHelper_1.getAndroidView(this);
    if (!androidView) {
        return;
    }
    switch (value.toLowerCase()) {
        case 'assertive': {
            androidView.setAccessibilityLiveRegion(android.view.View.ACCESSIBILITY_LIVE_REGION_ASSERTIVE);
            if (trace_1.isTraceEnabled()) {
                trace_1.writeTrace("View<" + this + ".android>.accessibilityLiveRegion - value: " + value + ". Sets to ACCESSIBILITY_LIVE_REGION_ASSERTIVE");
            }
            break;
        }
        case 'polite': {
            androidView.setAccessibilityLiveRegion(android.view.View.ACCESSIBILITY_LIVE_REGION_POLITE);
            if (trace_1.isTraceEnabled()) {
                trace_1.writeTrace("View<" + this + ".android>.accessibilityLiveRegion - value: " + value + ". Sets to ACCESSIBILITY_LIVE_REGION_POLITE");
            }
            break;
        }
        default: {
            androidView.setAccessibilityLiveRegion(android.view.View.ACCESSIBILITY_LIVE_REGION_NONE);
            if (trace_1.isTraceEnabled()) {
                trace_1.writeTrace("View<" + this + ".android>.accessibilityLiveRegion - value: " + value + ". Sets to ACCESSIBILITY_LIVE_REGION_NONE");
            }
            break;
        }
    }
});
view_1.View.prototype[view_common_1.accessibleCssProperty.setNative] = profiling_1.profile('View<A11Y>.accessibleSetNative', function accessibleSetNative(isAccessible) {
    var androidView = AccessibilityHelper_1.getAndroidView(this);
    if (!androidView) {
        return;
    }
    androidView.setFocusable(!!isAccessible);
    if (trace_1.isTraceEnabled()) {
        trace_1.writeTrace("View<" + this + ".android>.accessible = " + isAccessible);
    }
    AccessibilityHelper_1.AccessibilityHelper.updateAccessibilityProperties(this);
});
helpers_1.setViewFunction(view_1.View, view_common_1.androidFunctions.androidSendAccessibilityEvent, profiling_1.profile('View<A11Y>..sendAccessibilityEvent', function sendAccessibilityEvent(eventName, msg) {
    var _this = this;
    var cls = "View<" + this + ".android>.sendAccessibilityEvent(" + eventName + " -> " + msg + ")";
    var androidView = AccessibilityHelper_1.getAndroidView(this);
    if (androidView) {
        if (trace_1.isTraceEnabled()) {
            trace_1.writeTrace("" + cls);
        }
        AccessibilityHelper_1.AccessibilityHelper.sendAccessibilityEvent(this, eventName, msg);
        return;
    }
    androidView = null;
    if (trace_1.isTraceEnabled()) {
        trace_1.writeTrace(cls + " -> waiting for view to be loaded");
    }
    this.once(view_1.View.loadedEvent, function (args) {
        androidView = AccessibilityHelper_1.getAndroidView(args.object);
        if (!androidView) {
            if (trace_1.isTraceEnabled()) {
                trace_1.writeTrace(cls + " -> view not loaded -> " + eventName + " -> " + msg);
            }
            return;
        }
        if (trace_1.isTraceEnabled()) {
            trace_1.writeTrace(cls + " -> view loaded -> " + eventName + " -> " + msg);
        }
        AccessibilityHelper_1.AccessibilityHelper.sendAccessibilityEvent(_this, eventName, msg);
    });
}));
helpers_1.setViewFunction(view_1.View, view_common_1.commonFunctions.accessibilityAnnouncement, profiling_1.profile('View<A11Y>.accessibilityAnnouncement', function accessibilityAnnouncement(msg) {
    var cls = "View<" + this + ".android>.accessibilityAnnouncement(" + JSON.stringify(msg) + ")";
    if (trace_1.isTraceEnabled()) {
        trace_1.writeTrace(cls);
    }
    if (!msg) {
        msg = this.accessibilityLabel;
        if (trace_1.isTraceEnabled()) {
            trace_1.writeTrace(cls + " - no msg sending accessibilityLabel = " + JSON.stringify(this.accessibilityLabel) + " instead");
        }
    }
    this.androidSendAccessibilityEvent('announcement', msg);
}));
view_1.View.prototype[view_common_1.accessibilityLabelProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityLabelSetNative', function accessibilityLabelSetNative(label) {
    this._androidContentDescriptionUpdated = true;
    var newValue = AccessibilityHelper_1.AccessibilityHelper.updateContentDescription(this);
    if (trace_1.isTraceEnabled()) {
        trace_1.writeTrace("View<" + this + ".android>.accessibilityLabel = \"" + label + "\" - contentDesc = \"" + newValue + "\"");
    }
});
view_1.View.prototype[view_common_1.accessibilityValueProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityLabelSetNative', function accessibilityLabelSetNative(value) {
    this._androidContentDescriptionUpdated = true;
    var newValue = AccessibilityHelper_1.AccessibilityHelper.updateContentDescription(this);
    if (trace_1.isTraceEnabled()) {
        trace_1.writeTrace("View<" + this + ".android>.accessibilityValue = \"" + value + "\" - contentDesc = \"" + newValue + "\"");
    }
});
view_1.View.prototype[view_common_1.accessibilityHintProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityLabelSetNative', function accessibilityLabelSetNative(hint) {
    this._androidContentDescriptionUpdated = true;
    var newValue = AccessibilityHelper_1.AccessibilityHelper.updateContentDescription(this);
    if (trace_1.isTraceEnabled()) {
        trace_1.writeTrace("View<" + this + ".android>.accessibilityHint = \"" + hint + "\" - contentDesc = \"" + newValue + "\"");
    }
});
helpers_1.setViewFunction(view_1.View, view_common_1.commonFunctions.accessibilityScreenChanged, profiling_1.profile('View<A11Y>..accessibilityScreenChanged', function accessibilityScreenChanged() {
    this.androidSendAccessibilityEvent('window_state_changed');
}));
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var trace = require("@nativescript/core/trace");
var categories;
(function (categories) {
    categories.A11Y = 'A11Y';
    categories.GlobalEvents = categories.A11Y + "-GlobalEvents";
    categories.FontScale = categories.A11Y + "-FontScale";
    categories.AndroidHelper = categories.A11Y + "-AndroidHelper";
    categories.separator = ',';
    categories.All = [categories.A11Y, categories.GlobalEvents, categories.FontScale, categories.AndroidHelper];
})(categories = exports.categories || (exports.categories = {}));
function isTraceEnabled() {
    return trace.isEnabled();
}
exports.isTraceEnabled = isTraceEnabled;
function writeTrace(message, type, category) {
    if (type === void 0) { type = trace.messageType.info; }
    if (category === void 0) { category = categories.A11Y; }
    if (isTraceEnabled()) {
        trace.write(message, category, type);
    }
}
exports.writeTrace = writeTrace;
function writeFontScaleTrace(message, type) {
    if (type === void 0) { type = trace.messageType.info; }
    writeTrace(message, type, categories.FontScale);
}
exports.writeFontScaleTrace = writeFontScaleTrace;
function writeGlobalEventsTrace(message, type) {
    if (type === void 0) { type = trace.messageType.info; }
    writeTrace(message, type, categories.GlobalEvents);
}
exports.writeGlobalEventsTrace = writeGlobalEventsTrace;
function writeErrorTrace(message) {
    trace.write(message, categories.A11Y, trace.messageType.error);
}
exports.writeErrorTrace = writeErrorTrace;
function writeWarnTrace(message) {
    writeTrace(message, trace.messageType.warn);
}
exports.writeWarnTrace = writeWarnTrace;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdEQUFrRDtBQUNsRCxJQUFpQixVQUFVLENBUTFCO0FBUkQsV0FBaUIsVUFBVTtJQUNaLGVBQUksR0FBRyxNQUFNLENBQUM7SUFDZCx1QkFBWSxHQUFNLFdBQUEsSUFBSSxrQkFBZSxDQUFDO0lBQ3RDLG9CQUFTLEdBQU0sV0FBQSxJQUFJLGVBQVksQ0FBQztJQUNoQyx3QkFBYSxHQUFNLFdBQUEsSUFBSSxtQkFBZ0IsQ0FBQztJQUV4QyxvQkFBUyxHQUFHLEdBQUcsQ0FBQztJQUNoQixjQUFHLEdBQUcsQ0FBQyxXQUFBLElBQUksRUFBRSxXQUFBLFlBQVksRUFBRSxXQUFBLFNBQVMsRUFBRSxXQUFBLGFBQWEsQ0FBQyxDQUFDO0FBQ3BFLENBQUMsRUFSZ0IsVUFBVSxHQUFWLGtCQUFVLEtBQVYsa0JBQVUsUUFRMUI7QUFFRCxTQUFnQixjQUFjO0lBQzVCLE9BQU8sS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQzNCLENBQUM7QUFGRCx3Q0FFQztBQUtELFNBQWdCLFVBQVUsQ0FBQyxPQUFlLEVBQUUsSUFBNkIsRUFBRSxRQUEwQjtJQUF6RCxxQkFBQSxFQUFBLE9BQU8sS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJO0lBQUUseUJBQUEsRUFBQSxXQUFXLFVBQVUsQ0FBQyxJQUFJO0lBQ25HLElBQUksY0FBYyxFQUFFLEVBQUU7UUFDcEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3RDO0FBQ0gsQ0FBQztBQUpELGdDQUlDO0FBRUQsU0FBZ0IsbUJBQW1CLENBQUMsT0FBZSxFQUFFLElBQTZCO0lBQTdCLHFCQUFBLEVBQUEsT0FBTyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUk7SUFDaEYsVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFGRCxrREFFQztBQUVELFNBQWdCLHNCQUFzQixDQUFDLE9BQWUsRUFBRSxJQUE2QjtJQUE3QixxQkFBQSxFQUFBLE9BQU8sS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJO0lBQ25GLFVBQVUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNyRCxDQUFDO0FBRkQsd0RBRUM7QUFFRCxTQUFnQixlQUFlLENBQUMsT0FBTztJQUNyQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakUsQ0FBQztBQUZELDBDQUVDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLE9BQU87SUFDcEMsVUFBVSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFGRCx3Q0FFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRyYWNlIGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZS90cmFjZSc7XG5leHBvcnQgbmFtZXNwYWNlIGNhdGVnb3JpZXMge1xuICBleHBvcnQgY29uc3QgQTExWSA9ICdBMTFZJztcbiAgZXhwb3J0IGNvbnN0IEdsb2JhbEV2ZW50cyA9IGAke0ExMVl9LUdsb2JhbEV2ZW50c2A7XG4gIGV4cG9ydCBjb25zdCBGb250U2NhbGUgPSBgJHtBMTFZfS1Gb250U2NhbGVgO1xuICBleHBvcnQgY29uc3QgQW5kcm9pZEhlbHBlciA9IGAke0ExMVl9LUFuZHJvaWRIZWxwZXJgO1xuXG4gIGV4cG9ydCBjb25zdCBzZXBhcmF0b3IgPSAnLCc7XG4gIGV4cG9ydCBjb25zdCBBbGwgPSBbQTExWSwgR2xvYmFsRXZlbnRzLCBGb250U2NhbGUsIEFuZHJvaWRIZWxwZXJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUcmFjZUVuYWJsZWQoKSB7XG4gIHJldHVybiB0cmFjZS5pc0VuYWJsZWQoKTtcbn1cblxuLyoqXG4gKiBXcml0ZSB0byBOYXRpdmVTY3JpcHQncyB0cmFjZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlVHJhY2UobWVzc2FnZTogc3RyaW5nLCB0eXBlID0gdHJhY2UubWVzc2FnZVR5cGUuaW5mbywgY2F0ZWdvcnkgPSBjYXRlZ29yaWVzLkExMVkpIHtcbiAgaWYgKGlzVHJhY2VFbmFibGVkKCkpIHtcbiAgICB0cmFjZS53cml0ZShtZXNzYWdlLCBjYXRlZ29yeSwgdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlRm9udFNjYWxlVHJhY2UobWVzc2FnZTogc3RyaW5nLCB0eXBlID0gdHJhY2UubWVzc2FnZVR5cGUuaW5mbykge1xuICB3cml0ZVRyYWNlKG1lc3NhZ2UsIHR5cGUsIGNhdGVnb3JpZXMuRm9udFNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlR2xvYmFsRXZlbnRzVHJhY2UobWVzc2FnZTogc3RyaW5nLCB0eXBlID0gdHJhY2UubWVzc2FnZVR5cGUuaW5mbykge1xuICB3cml0ZVRyYWNlKG1lc3NhZ2UsIHR5cGUsIGNhdGVnb3JpZXMuR2xvYmFsRXZlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlRXJyb3JUcmFjZShtZXNzYWdlKSB7XG4gIHRyYWNlLndyaXRlKG1lc3NhZ2UsIGNhdGVnb3JpZXMuQTExWSwgdHJhY2UubWVzc2FnZVR5cGUuZXJyb3IpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVXYXJuVHJhY2UobWVzc2FnZSkge1xuICB3cml0ZVRyYWNlKG1lc3NhZ2UsIHRyYWNlLm1lc3NhZ2VUeXBlLndhcm4pO1xufVxuIl19
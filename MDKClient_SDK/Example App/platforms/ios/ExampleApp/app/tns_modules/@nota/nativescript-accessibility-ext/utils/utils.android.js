"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var nsApp = require("@nativescript/core/application");
var observable_1 = require("@nativescript/core/data/observable");
var utils = require("@nativescript/core/utils/utils");
var trace_1 = require("../trace");
var utils_common_1 = require("./utils-common");
function getA11YManager() {
    var cls = "getA11YManager()";
    var context = utils.ad.getApplicationContext();
    if (!context) {
        if (trace_1.isTraceEnabled()) {
            trace_1.writeTrace(cls + ": no context");
        }
        return null;
    }
    return context.getSystemService(android.content.Context.ACCESSIBILITY_SERVICE);
}
var accessibilityStateChangeListener;
var touchExplorationStateChangeListener;
var sharedA11YObservable;
var A11yStateEnabledPropName = 'a11yStateEnabled';
var TouchExplorationStateEnabledPropName = 'touchExplorationStateEnabled';
function updateState() {
    var a11yManager = getA11YManager();
    if (!a11yManager) {
        return;
    }
    sharedA11YObservable.set(A11yStateEnabledPropName, !!a11yManager.isEnabled());
    sharedA11YObservable.set(TouchExplorationStateEnabledPropName, !!a11yManager.isTouchExplorationEnabled());
}
function ensureStateListener() {
    if (accessibilityStateChangeListener) {
        return sharedA11YObservable;
    }
    var a11yManager = getA11YManager();
    sharedA11YObservable = new observable_1.Observable();
    Object.defineProperty(sharedA11YObservable, utils_common_1.AccessibilityServiceEnabledPropName, {
        get: function () {
            return !!this[A11yStateEnabledPropName] && !!this[TouchExplorationStateEnabledPropName];
        },
    });
    if (!a11yManager) {
        sharedA11YObservable.set(A11yStateEnabledPropName, false);
        sharedA11YObservable.set(TouchExplorationStateEnabledPropName, false);
        return sharedA11YObservable;
    }
    accessibilityStateChangeListener = new android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener({
        onAccessibilityStateChanged: function (enabled) {
            updateState();
            if (trace_1.isTraceEnabled()) {
                trace_1.writeTrace("AccessibilityStateChangeListener state changed to: " + !!enabled);
            }
        },
    });
    touchExplorationStateChangeListener = new android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener({
        onTouchExplorationStateChanged: function (enabled) {
            updateState();
            if (trace_1.isTraceEnabled()) {
                trace_1.writeTrace("TouchExplorationStateChangeListener state changed to: " + !!enabled);
            }
        },
    });
    a11yManager.addAccessibilityStateChangeListener(accessibilityStateChangeListener);
    a11yManager.addTouchExplorationStateChangeListener(touchExplorationStateChangeListener);
    updateState();
    nsApp.on(nsApp.resumeEvent, updateState);
    return sharedA11YObservable;
}
function isAccessibilityServiceEnabled() {
    return ensureStateListener().accessibilityServiceEnabled;
}
exports.isAccessibilityServiceEnabled = isAccessibilityServiceEnabled;
nsApp.on(nsApp.exitEvent, function (args) {
    var activity = args.android;
    if (activity && !activity.isFinishing()) {
        return;
    }
    var a11yManager = getA11YManager();
    if (a11yManager) {
        if (accessibilityStateChangeListener) {
            a11yManager.removeAccessibilityStateChangeListener(accessibilityStateChangeListener);
        }
        if (touchExplorationStateChangeListener) {
            a11yManager.removeTouchExplorationStateChangeListener(touchExplorationStateChangeListener);
        }
    }
    accessibilityStateChangeListener = null;
    touchExplorationStateChangeListener = null;
    if (sharedA11YObservable) {
        sharedA11YObservable.removeEventListener(observable_1.Observable.propertyChangeEvent);
        sharedA11YObservable = null;
    }
    nsApp.off(nsApp.resumeEvent, updateState);
});
var AccessibilityServiceEnabledObservable = (function (_super) {
    __extends(AccessibilityServiceEnabledObservable, _super);
    function AccessibilityServiceEnabledObservable() {
        return _super.call(this, ensureStateListener()) || this;
    }
    return AccessibilityServiceEnabledObservable;
}(utils_common_1.CommonA11YServiceEnabledObservable));
exports.AccessibilityServiceEnabledObservable = AccessibilityServiceEnabledObservable;
__export(require("@nativescript/core/utils/utils"));
//# sourceMappingURL=data:application/json;base64,
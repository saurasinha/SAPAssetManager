"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var profiling_1 = require("@nativescript/core/profiling");
var view_1 = require("@nativescript/core/ui/core/view");
var trace_1 = require("../../trace");
var AccessibilityHelper_1 = require("../../utils/AccessibilityHelper");
var helpers_1 = require("../../utils/helpers");
var view_common_1 = require("./view-common");
var updateA11YProperty = profiling_1.profile('updateA11YProperty', function updateA11YPropertyImpl(tnsView, propName, value) {
    var cls = "View<" + tnsView + ".ios>." + propName + " = " + value;
    var uiView = AccessibilityHelper_1.getUIView(tnsView);
    if (!uiView) {
        if (trace_1.isTraceEnabled()) {
            trace_1.writeTrace(cls + " - no nativeView");
        }
        return;
    }
    value = value != null ? "" + value : null;
    if (trace_1.isTraceEnabled()) {
        trace_1.writeTrace("" + cls);
    }
    uiView[propName] = value;
});
view_1.View.prototype[view_common_1.accessibleCssProperty.setNative] = profiling_1.profile('View<A11Y>.accessibleSetNative', function accessibleSetNative(isAccessible) {
    var uiView = AccessibilityHelper_1.getUIView(this);
    if (!uiView) {
        return;
    }
    uiView.isAccessibilityElement = !!isAccessible;
    if (trace_1.isTraceEnabled()) {
        trace_1.writeTrace("View<" + this + ".ios>.accessible = " + uiView.isAccessibilityElement);
    }
    AccessibilityHelper_1.AccessibilityHelper.updateAccessibilityProperties(this);
});
view_1.View.prototype[view_common_1.accessibilityRoleCssProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityComponentTypeSetNative', function accessibilityComponentTypeSetNative() {
    AccessibilityHelper_1.AccessibilityHelper.updateAccessibilityProperties(this);
});
view_1.View.prototype[view_common_1.accessibilityTraitsProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityTraitsSetNative', function accessibilityTraitsSetNative() {
    AccessibilityHelper_1.AccessibilityHelper.updateAccessibilityProperties(this);
});
view_1.View.prototype[view_common_1.accessibilityValueProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityValueSetNative', function accessibilityValueSetNative(value) {
    updateA11YProperty(this, 'accessibilityValue', value);
});
view_1.View.prototype[view_common_1.accessibilityHiddenCssProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityElementsHiddenSetNative', function accessibilityElementsHiddenSetNative(isHidden) {
    var uiView = AccessibilityHelper_1.getUIView(this);
    if (!uiView) {
        return;
    }
    uiView.accessibilityElementsHidden = !!isHidden;
    if (trace_1.isTraceEnabled()) {
        trace_1.writeTrace("View<" + this + ".ios>.accessibilityElementsHidden - " + !!isHidden);
    }
    AccessibilityHelper_1.AccessibilityHelper.updateAccessibilityProperties(this);
});
view_1.View.prototype[view_common_1.accessibilityLiveRegionCssProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityLiveRegionSetNative', function accessibilityLiveRegionSetNative() {
    AccessibilityHelper_1.AccessibilityHelper.updateAccessibilityProperties(this);
});
view_1.View.prototype[view_common_1.accessibilityStateCssProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityStateSetNative', function accessibilityStateSetNative() {
    AccessibilityHelper_1.AccessibilityHelper.updateAccessibilityProperties(this);
});
helpers_1.setViewFunction(view_1.View, view_common_1.iosFunctions.iosPostAccessibilityNotification, profiling_1.profile('View<A11Y>.iosPostAccessibilityNotification', function postAccessibilityNotification(notificationType, msg) {
    var cls = "View<" + this + ".ios>.postAccessibilityNotification(\"" + notificationType + "\", \"" + msg + "\")";
    if (!notificationType) {
        if (trace_1.isTraceEnabled()) {
            trace_1.writeTrace(cls + " - falsy notificationType");
        }
        return;
    }
    var notification;
    var args = AccessibilityHelper_1.getUIView(this);
    if (typeof msg === 'string' && msg) {
        args = msg;
    }
    switch (notificationType.toLowerCase()) {
        case 'announcement': {
            notification = UIAccessibilityAnnouncementNotification;
            break;
        }
        case 'layout': {
            notification = UIAccessibilityLayoutChangedNotification;
            break;
        }
        case 'screen': {
            notification = UIAccessibilityScreenChangedNotification;
            break;
        }
        default: {
            if (trace_1.isTraceEnabled()) {
                trace_1.writeTrace(cls + " - unknown notificationType");
            }
            return;
        }
    }
    if (trace_1.isTraceEnabled()) {
        trace_1.writeTrace(cls + " - send " + notification + " with " + (args || null));
    }
    UIAccessibilityPostNotification(notification, args || null);
}));
helpers_1.setViewFunction(view_1.View, view_common_1.commonFunctions.accessibilityAnnouncement, profiling_1.profile('View<A11Y>.accessibilityAnnouncement', function accessibilityAnnouncement(msg) {
    var cls = "View<" + this + ".ios>.accessibilityAnnouncement(\"" + msg + "\")";
    if (!msg) {
        if (trace_1.isTraceEnabled()) {
            trace_1.writeTrace(cls + " - no msg, sending view.accessibilityLabel = " + this.accessibilityLabel + " instead");
        }
        msg = this.accessibilityLabel;
    }
    if (trace_1.isTraceEnabled()) {
        trace_1.writeTrace(cls + " - sending " + msg);
    }
    this.iosPostAccessibilityNotification('announcement', msg);
}));
view_1.View.prototype[view_common_1.accessibilityLabelProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityLabelSetNative', function accessibilityLabelSetNative(label) {
    updateA11YProperty(this, 'accessibilityLabel', label);
});
view_1.View.prototype[view_common_1.accessibilityIdProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityIdentifierSetNative', function accessibilityIdentifierSetNative(identifier) {
    updateA11YProperty(this, 'accessibilityIdentifier', identifier);
});
view_1.View.prototype[view_common_1.accessibilityLanguageProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityLanguageSetNative', function accessibilityLanguageSetNative(lang) {
    updateA11YProperty(this, 'accessibilityLanguage', lang);
});
view_1.View.prototype[view_common_1.accessibilityHintProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityHintSetNative', function accessibilityHintSetNative(hint) {
    updateA11YProperty(this, 'accessibilityHint', hint);
});
view_1.View.prototype[view_common_1.accessibilityMediaSessionCssProperty.setNative] = profiling_1.profile('View<A11Y>.accessibilityMediaSessionSetNative', function accessibilityMediaSessionSetNative() {
    AccessibilityHelper_1.AccessibilityHelper.updateAccessibilityProperties(this);
});
helpers_1.setViewFunction(view_1.View, view_common_1.commonFunctions.accessibilityScreenChanged, profiling_1.profile('View<A11Y>..accessibilityScreenChanged', function accessibilityScreenChanged() {
    this.iosPostAccessibilityNotification('screen');
}));
//# sourceMappingURL=data:application/json;base64,
import { RadSideDrawer } from 'nativescript-ui-sidedrawer';
import { NavigationEntry } from 'tns-core-modules/ui/frame/frame';
import { BaseControl } from './BaseControl';
import { IControlData } from './IControlData';
import { SideDrawerObservable } from '../observables/SideDrawerObservable';
export declare class SideDrawer extends BaseControl {
    private _radSideDrawerView;
    private _imageFontIconClassName;
    private _clearHistory;
    private _menuItemDefnsForTabs;
    private _selectedItem;
    private _styles;
    private MENU_ITEM_IMAGE_WIDTH;
    private MENU_ITEM_IMAGE_HEIGHT;
    private HEADER_ICON_HEIGHT;
    private HEADER_ICON_WIDTH;
    private PNG_BASE64_PREFIX;
    private _resolvedDefinition;
    private _lightIdentifier;
    private _darkIdentifier;
    blankMainPage: boolean;
    blankItemSelected: boolean;
    blankItemIndexPath: [number, number];
    blankItemModalAnchorPage: any;
    staleDataChanged: boolean;
    private _drawerContentView;
    private _swipeInitiated;
    private _needsBottomNavRedraw;
    private _selectedMenuItemName;
    private _currentDrawerItems;
    private _isItemsDefinedFromRule;
    private _shellPage;
    private _visibility;
    initialize(controlData: IControlData): void;
    bind(): Promise<any>;
    renderMainPage(): Promise<NavigationEntry>;
    private executeOnPressActionFromMenuItem;
    view(): RadSideDrawer;
    closeDrawer(): void;
    showDrawer(): void;
    getItemsCountPerSection(): number[];
    readonly isVisible: boolean;
    redrawStaleDataChanged(): void;
    getSelectedMenuItemIndexPath(): [number, number];
    getSelectedMenuItemName(): string;
    setSelectedMenuItemByName(menuItemName: string): void;
    setSelectedMenuItemByIndexPath(menuItemIndexPath: [number, number]): void;
    getSectionCaptions(): string[];
    setSectionVisibilityAtIndex(sectionIndex: number, visibility: boolean): void;
    getMenuItemCaption(indexPath: [number, number]): string;
    setMenuItemCaption(indexPath: number, caption: string): void;
    setMenuItemVisibility(indexPath: [number, number], visibility: boolean): void;
    redraw(): void;
    navigateToBlankFrame(sectionIdx: number, index: number): any;
    protected createObservable(): SideDrawerObservable;
    private onLoaded;
    private onDrawerSwipe;
    private onDrawerOpened;
    private onDrawerClosed;
    private updateSideDrawer;
    private redrawSideDrawerUI;
    private resetSideDrawer;
    private recreateBottomNav;
    private checkifDrawerNeedsUpdate;
    private getBottomNavSelectionItemIndex;
    private getDrawerItemsArray;
    private getItemWithIndexPath;
    private getSectionWithIndex;
    private getMenuView;
    private getMenuItemIndexFromIndexPath;
    private getMenuItemIndexPathFromName;
    private resolveDrawerDefinition;
    private createDrawer;
    private createSections;
    private createHeader;
    private getHeaderIconTextStyles;
    private setHeaderIconWithTextIcon;
    private getHeaderAlignment;
    private createSection;
    private createMenuItem;
    private updateResolvedSectionDefinition;
    private getClassNameForRtl;
    private getDefaultStyle;
    private _getAppearanceStyle;
    private readonly isRtl;
    private getTextAlignment;
    private menuItemSelected;
    private navigateToSelectedItem;
    private navigateToFrame;
    private menuClickedTwice;
    private readonly bottomNavControl;
    private _resetDrawerState;
    private resetMenuItemSelectionState;
    private setMenuItemOnPressStyle;
    private clearMenuItemOnPressStyle;
    private setMenuItemAsActive;
    private resolveData;
    private executeOnPressActionOrRule;
    private getFrameId;
    getCurrentItemPage(): import("tns-core-modules/ui/frame/frame").Page;
    private buildNavStackForMenus;
}

import { ObservableArray } from 'tns-core-modules/data/observable-array';
import { ITargetServiceSpecifier, ITargetLinkSpecifier, IMediaSpecifier, IParentLinkSpecifier } from './ITargetSpecifier';
import { IContext } from '../context/IContext';
export declare abstract class IDataService {
    static setInstance(provider: IDataService): void;
    static instance(): IDataService;
    static isValid(): boolean;
    private static _instance;
    abstract createService(params: any): Promise<any>;
    abstract openService(params: any): Promise<any>;
    abstract downloadMedia(service: ITargetServiceSpecifier): Promise<any>;
    abstract isMediaLocal(service: ITargetServiceSpecifier): Promise<boolean>;
    abstract downloadOfflineOData(params: any): Promise<any>;
    abstract initializeOfflineStore(params: any): Promise<any>;
    abstract clearOfflineStore(params: any): Promise<any>;
    abstract closeOfflineStore(params: any): Promise<any>;
    abstract uploadOfflineOData(params: any): Promise<any>;
    abstract cancelUploadOfflineOData(params: any): Promise<any>;
    abstract cancelDownloadOfflineOData(params: any): Promise<any>;
    abstract read(service: ITargetServiceSpecifier): Promise<ObservableArray<any>>;
    abstract readWithPageSize(service: ITargetServiceSpecifier, pageSize?: number): Promise<{
        Value: ObservableArray<any>;
        nextLink: string;
    }>;
    abstract update(service: ITargetServiceSpecifier, createLinks: ITargetLinkSpecifier[], updateLinks: ITargetLinkSpecifier[], deleteLinks: ITargetLinkSpecifier[], headers: Object): Promise<any>;
    abstract create(service: ITargetServiceSpecifier, createLinks: ITargetLinkSpecifier[], headers: Object): Promise<any>;
    abstract createRelated(service: ITargetServiceSpecifier, parent: IParentLinkSpecifier, headers: Object): Promise<any>;
    abstract createMedia(service: ITargetServiceSpecifier, headers: Object, media: IMediaSpecifier[]): Promise<any>;
    abstract createRelatedMedia(service: ITargetServiceSpecifier, parent: IParentLinkSpecifier, headers: Object, media: IMediaSpecifier[]): Promise<any>;
    abstract beginChangeSet(service: ITargetServiceSpecifier): Promise<any>;
    abstract cancelChangeSet(service: ITargetServiceSpecifier): Promise<any>;
    abstract commitChangeSet(service: ITargetServiceSpecifier): Promise<any>;
    abstract isOnChangeSet(): boolean;
    abstract delete(service: ITargetServiceSpecifier, headers: Object): Promise<any>;
    abstract deleteMedia(service: ITargetServiceSpecifier): Promise<any>;
    abstract urlForServiceName(serviceName: string): string;
    abstract count(service: ITargetServiceSpecifier, context: IContext): Promise<number>;
    abstract offlineEnabled(serviceName: string): boolean;
    abstract callFunction(service: ITargetServiceSpecifier, headers: Object): Promise<ObservableArray<any>>;
    abstract getPropertyType(serviceName: string, entitySet: string, propertyName: string): string;
    abstract getVersion(serviceUrl: string): number;
    abstract getOfflineStoreStatus(serviceName: string): string;
    abstract uploadStream(service: ITargetServiceSpecifier, headers: Object): Promise<any>;
    abstract downloadStream(service: ITargetServiceSpecifier, headers: Object): Promise<any>;
    abstract undoPendingChanges(service: ITargetServiceSpecifier): Promise<any>;
    abstract base64StringToBinary(base64: string): Promise<any>;
    abstract getServiceHeaders(serviceName: string): any;
    abstract saveResolvedServiceInfo(serviceName: string, params: any): any;
    abstract clearResolvedServiceInfo(): any;
    abstract getResolvedServiceInfo(serviceName: string): any;
    abstract getOfflineParameter(serviceName: string, name: string): any;
    abstract setOfflineParameter(serviceName: string, name: string, value: any): void;
    abstract syncPendingODataTxnsOnUserChange(): Promise<any>;
    abstract getPreviousUser(): string;
}

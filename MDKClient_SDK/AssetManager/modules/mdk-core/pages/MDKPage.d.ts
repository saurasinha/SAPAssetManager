import * as frameModule from 'tns-core-modules/ui/frame';
import { Color } from 'tns-core-modules/color';
import { ProgressBar } from 'mdk-sap';
import { NavigatedData, Page } from 'tns-core-modules/ui/page';
import { ODataAction } from '../actions/ODataAction';
import { Context } from '../context/Context';
import { FormCellContainer } from '../controls/FormCellContainer';
import { IControl } from '../controls/IControl';
import { IFilterable } from '../controls/IFilterable';
import { ToolbarContainer } from '../controls/ToolbarContainer';
import { IDataEventListener } from '../data/DataEventHandler';
import { PageDefinition } from '../definitions/PageDefinition';
import { IMDKPage } from './IMDKPage';
import { ModalFrame } from './ModalFrame';
import { TextField } from 'tns-core-modules/ui/text-field';
import { SideDrawer } from '../controls/SideDrawer';
import { LoadingIndicatorData } from '../common/LoadingIndicatorData';
export declare class MDKPage extends Page implements IMDKPage, IDataEventListener {
    static resetNavigateFlags(): void;
    static setResetActionInProgress(flag: boolean): void;
    static garbageCollect(): void;
    static setDisplayingExternalPage(display: any): void;
    private static _navigatingFromPage;
    private static _navigatingToPage;
    private static _lastKnownBackStackCount;
    private static _isBackNavigation;
    private static _nextPageId;
    private static _resetActionIsRunning;
    private static _isExternalPage;
    private static _currentDrawerButton;
    context: Context;
    staleDataListeners: Set<IDataEventListener>;
    previousPage: MDKPage;
    isResuming: boolean;
    _isClearHistoryNavigation: boolean;
    _isTabFrameWithHeader: boolean;
    private _filter;
    private _filterResult;
    private _childControls;
    private _dataSubscriptions;
    private _definition;
    private _externalNavigating;
    private _backgroundColor;
    private _titleColor;
    private _pageHasLoadedOnce;
    private _pageOnLoadedEventExecuted;
    private _pageOriginalOnLoadedEventExecuted;
    private _modalCanceled;
    private _modalDismissed;
    private _modalFrame;
    private _onModalCancel;
    private _onModalComplete;
    private _dismissModalDone;
    private _toolbarDefinition;
    private _toolbar;
    private _actionBarTitleStyle;
    private _id;
    private _displayingWaitCursor;
    private _progressBar;
    private _progressBarVisible;
    private _targetFrameId;
    private _pageTag;
    private _actionBarIsFirstSetup;
    private _isActionBarFirstSetupDone;
    private _actionBarFirstSetupDone;
    private _firstLoadProfileId;
    private _searchField;
    private _searchTextRemoveIcon;
    private _searchStr;
    private _isSearchActive;
    private _barcodeScannerItem;
    private _searchActionItem;
    private _searchableSectionOnPage;
    private _defaultContentInsetStartWithNavigation;
    private _defaultColor;
    private _defaultTitleColor;
    private _defaultTitle;
    private _defaultView;
    private _defaultActionItems;
    private _defaultSearchTextColor;
    private _defaultNavigationButton;
    private _defaultNavigationButtonVisibility;
    private _searchParams;
    private _headerSection;
    private _isModal;
    private _isFullPage;
    private _isPopover;
    private _popOverData;
    private _imageFontIconClassNameXSmall;
    private _imageFontIconClassNameSmall;
    private _imageFontIconClassNameMedium;
    private _loadingIndicatorData;
    private _cssClassNames;
    private _isTabsTabPage;
    private _isFromBackNavigation;
    constructor(pageDefinition: PageDefinition, isPageShell?: boolean, isClearHistory?: boolean);
    getAppLevelSideDrawer(): SideDrawer;
    readonly PullDown: any;
    readonly sectionCount: number;
    readonly isStaticSectionPresent: boolean;
    executeOnPulledDownActionOrRule(): Promise<any>;
    progressBar: ProgressBar;
    progressBarVisible: boolean;
    isTabsTabPage: boolean;
    popOverData: any;
    addChildControl(control: IControl): void;
    headerSection: boolean;
    targetFrameId: string;
    pageTag: string;
    setLoadingIndicatorData(data: LoadingIndicatorData): void;
    getLoadingIndicatorId(): number;
    dismissModalPage(canceled: boolean, onModalComplete: Function, onModalCancel: Function): Promise<void>;
    onNavigatedToMDKPage(args: NavigatedData): void;
    waitUntilModalDismissed(): Promise<any>;
    triggerOnDismissingModal(): void;
    handleModalDismissed(isFilterModalPage: boolean): void;
    private _getToolBarHeight;
    dismissPopover(): void;
    displayModalPage(modalPage: MDKPage, context: Context, closeCallback: Function, isPopover: boolean, isFullPage?: boolean): void;
    dismissPopoverForRestore(): void;
    restorePopover(): void;
    updateModalPopoverAnchor(): void;
    readonly controls: IControl[];
    readonly debugString: string;
    readonly isMDKPage: boolean;
    isPopover: boolean;
    readonly definition: PageDefinition;
    modalFrame: ModalFrame;
    caption: string;
    readonly isNavigating: boolean;
    readonly isBackNavigation: boolean;
    isExternalNavigating: boolean;
    readonly filter: IFilterable;
    readonly isPageOriginalOnLoadedEventExecuted: boolean;
    readonly isPageHasLoadedOnce: boolean;
    isFullScreen(): boolean;
    getToolbar(): Promise<ToolbarContainer>;
    getTabControl(): import("tns-core-modules/ui/bottom-navigation/bottom-navigation").TabStrip;
    updateProgressBar(): void;
    onLoaded(): void;
    findFormCellContainerOnPage(): FormCellContainer;
    initialize(context: Context, isModal: boolean, isPopover?: boolean, isFullPage?: boolean): void;
    onDataChanged(action: ODataAction, result: any): void;
    _redrawActionBar(): void;
    _redrawToolbar(): void;
    redraw(): void;
    tabPageOnUnloaded(): void;
    private _unregisterTabPageDataListeners;
    onUnloaded(): void;
    unregisterDataListeners(): void;
    readonly isCurrentPage: boolean;
    redrawStaleDataListeners(allowIndicator?: boolean): void;
    onLayout(left: number, top: number, right: number, bottom: number): void;
    isModal(): boolean;
    updateSearchIconVisibility(): void;
    runOnLoadedEvent(): Promise<any>;
    finishedCheckingWithErrors(newValue: string): void;
    finishedScanningWithResults: (results: any) => void;
    errorScanningWithMessage: (message: any) => void;
    readonly searchField: TextField;
    finishedCheckingWithResults(result: boolean): void;
    androidSearchbarUISetupHelper(initialSetup: boolean): void;
    setSearchString(searchText: string): boolean;
    private _activateSearch;
    private _onSearchClear;
    private _initScannerIcon;
    private _initCloseIcon;
    private _initSearchField;
    private _handleSearchTextChange;
    private _onSearchBackPressed;
    private _executeBarcodeScan;
    private _executeCapabilityCheck;
    private readonly _displayingExternalPage;
    private readonly _actionBarTitleFont;
    private readonly _tapPageExists;
    private readonly _pageExists;
    private registerDataListeners;
    private _resolveValue;
    private _onNavigatingFrom;
    private _onNavigatedFrom;
    private _relocateBanner;
    private _onNavigatedTo;
    resetNavigatingFlags(): void;
    private _isSideDrawerButtonAvailable;
    readonly hasHamburgerActionItem: boolean;
    private _enableHamburgerActionBarItem;
    private getBackStackCount;
    private _checkAndroidBackButton;
    private _getIOSBackButtonTitle;
    private _alignAppBar;
    private _onNavigatingTo;
    private _onActivityBackPressed;
    private _executeParentBackPressEvent;
    private _handleBackPressedEventHandler;
    private _handleNavigatingTo;
    private _sortActionBarItemsByPosition;
    private _actionBarItemOnTap;
    private _createActionBarItems;
    private _buildItemTextForActionBar;
    private _buildItemIconForActionBar;
    private _buildIconText;
    private _getFontIconClassNameForActionBarItem;
    private _buildItemSystemItemForActionBar;
    private _buildItemsForActionBar;
    private _androidSetActionBarNavigationButton;
    private _setAndroidBackButton;
    _setAndroidSideDrawerButton(page?: MDKPage): void;
    private readonly alwaysShowDrawerButton;
    private _setSideDrawerButton;
    setSideDrawerButton(iconPath: String): void;
    static resetSideDrawerButton(): void;
    private _initSearchActionBarItem;
    private _initializeActionBar;
    private _updateActionBarHidden;
    private _getActionBarItemsCount;
    private _onPressAction;
    private _resolveModalPromise;
    private _setActionbarTitle;
    private _applyTitleStyle;
    private _getTitleStyleObject;
    private _onBackButtonTap;
    private _runOnLoadedEvent;
    private _debugPrintBackStack;
}
export declare const anchorColorProperty: frameModule.CssProperty<frameModule.Style, frameModule.Color>;
declare module '@nativescript/core/ui/styling/style' {
    interface Style {
        anchorColor: Color;
    }
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nsApp = require("@nativescript/core/application");
var observable_1 = require("@nativescript/core/data/observable");
var profiling_1 = require("@nativescript/core/profiling");
var trace_1 = require("../trace");
var getClosestValidFontScale = profiling_1.profile('getClosestValidFontScale', function getClosestValidFontScaleImpl(fontScale) {
    fontScale = Number(fontScale) || 1;
    return FontScaleObservable.VALID_FONT_SCALES.sort(function (a, b) { return Math.abs(fontScale - a) - Math.abs(fontScale - b); }).shift();
});
var internalObservable;
var fontScaleChanged = profiling_1.profile('fontScaleChanged', function fontScaleChangedImpl(origFontScale) {
    var cls = "fontScaleChanged(" + origFontScale + ")";
    if (trace_1.isTraceEnabled()) {
        trace_1.writeFontScaleTrace("" + cls);
    }
    var fontScale = getClosestValidFontScale(origFontScale);
    if (trace_1.isTraceEnabled()) {
        trace_1.writeFontScaleTrace(cls + " - settings closest valid value: " + fontScale);
    }
    internalObservable.set(FontScaleObservable.FONT_SCALE, fontScale);
    internalObservable.set(FontScaleObservable.IS_EXTRA_SMALL, fontScale < 0.85);
    internalObservable.set(FontScaleObservable.IS_EXTRA_LARGE, fontScale > 1.5);
});
var sizeMap = new Map([
    [UIContentSizeCategoryExtraSmall, 0.5],
    [UIContentSizeCategorySmall, 0.7],
    [UIContentSizeCategoryMedium, 0.85],
    [UIContentSizeCategoryLarge, 1],
    [UIContentSizeCategoryExtraLarge, 1.15],
    [UIContentSizeCategoryExtraExtraLarge, 1.3],
    [UIContentSizeCategoryExtraExtraExtraLarge, 1.5],
    [UIContentSizeCategoryAccessibilityMedium, 2],
    [UIContentSizeCategoryAccessibilityLarge, 2.5],
    [UIContentSizeCategoryAccessibilityExtraLarge, 3],
    [UIContentSizeCategoryAccessibilityExtraExtraLarge, 3.5],
    [UIContentSizeCategoryAccessibilityExtraExtraExtraLarge, 4],
]);
var contentSizeUpdated = profiling_1.profile('contentSizeUpdated', function contentSizeUpdatedImpl(fontSize) {
    if (sizeMap.has(fontSize)) {
        fontScaleChanged(sizeMap.get(fontSize));
        return;
    }
    if (trace_1.isTraceEnabled()) {
        trace_1.writeFontScaleTrace("fontSize: " + fontSize + " is unknown");
    }
    fontScaleChanged(1);
});
var useIOSFontScale = profiling_1.profile('useIOSFontScale', function useIOSFontScaleImpl() {
    if (nsApp.ios.nativeApp) {
        contentSizeUpdated(nsApp.ios.nativeApp.preferredContentSizeCategory);
    }
    else {
        fontScaleChanged(1);
    }
});
function setupConfigListener(attempt) {
    if (attempt === void 0) { attempt = 0; }
    if (!nsApp.ios.nativeApp) {
        if (attempt > 100) {
            if (trace_1.isTraceEnabled()) {
                trace_1.writeErrorTrace("App didn't become active couldn't enable font scaling");
            }
            fontScaleChanged(1);
            return;
        }
        setTimeout(function () { return setupConfigListener(attempt + 1); }, 1);
        return;
    }
    var fontSizeObserver = nsApp.ios.addNotificationObserver(UIContentSizeCategoryDidChangeNotification, function (args) {
        var fontSize = args.userInfo.valueForKey(UIContentSizeCategoryNewValueKey);
        contentSizeUpdated(fontSize);
    });
    nsApp.on(nsApp.exitEvent, function () {
        nsApp.ios.removeNotificationObserver(fontSizeObserver, UIContentSizeCategoryDidChangeNotification);
        internalObservable = null;
        nsApp.off(nsApp.resumeEvent, useIOSFontScale);
    });
    nsApp.on(nsApp.resumeEvent, useIOSFontScale);
    useIOSFontScale();
}
function ensureObservable() {
    if (internalObservable) {
        return;
    }
    internalObservable = new observable_1.Observable();
    setupConfigListener();
}
var FontScaleObservable = (function (_super) {
    __extends(FontScaleObservable, _super);
    function FontScaleObservable() {
        var _this = _super.call(this) || this;
        _this.fontScale = 1;
        _this.isExtraSmall = false;
        _this.isExtraLarge = false;
        ensureObservable();
        var selfRef = new WeakRef(_this);
        var callback = profiling_1.profile('FontScaleObservable.propertyChangeEvent', function (args) {
            var self = selfRef.get();
            if (self) {
                self.set(args.propertyName, args.value);
                return;
            }
            internalObservable.off(observable_1.Observable.propertyChangeEvent, callback);
        });
        internalObservable.on(observable_1.Observable.propertyChangeEvent, callback);
        var fontScale = internalObservable.get(FontScaleObservable.FONT_SCALE);
        _this.set(FontScaleObservable.IS_EXTRA_SMALL, fontScale < 0.85);
        _this.set(FontScaleObservable.IS_EXTRA_LARGE, fontScale > 1.5);
        _this.set(FontScaleObservable.FONT_SCALE, fontScale);
        return _this;
    }
    Object.defineProperty(FontScaleObservable, "VALID_FONT_SCALES", {
        get: function () {
            return [0.5, 0.7, 0.85, 1, 1.15, 1.3, 1.5, 2, 2.5, 3, 3.5, 4];
        },
        enumerable: true,
        configurable: true
    });
    FontScaleObservable.FONT_SCALE = 'fontScale';
    FontScaleObservable.IS_EXTRA_SMALL = 'isExtraSmall';
    FontScaleObservable.IS_EXTRA_LARGE = 'isExtraSmall';
    return FontScaleObservable;
}(observable_1.Observable));
exports.FontScaleObservable = FontScaleObservable;
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nsApp = require("@nativescript/core/application");
var observable_1 = require("@nativescript/core/data/observable");
var profiling_1 = require("@nativescript/core/profiling");
var trace_1 = require("../trace");
var getClosestValidFontScale = profiling_1.profile('getClosestValidFontScale', function getClosestValidFontScaleImpl(fontScale) {
    fontScale = Number(fontScale) || 1;
    return FontScaleObservable.VALID_FONT_SCALES.sort(function (a, b) { return Math.abs(fontScale - a) - Math.abs(fontScale - b); }).shift();
});
var internalObservable;
var fontScaleChanged = profiling_1.profile('fontScaleChanged', function fontScaleChangedImpl(origFontScale) {
    var fontScale = getClosestValidFontScale(origFontScale);
    var cls = "fontScaleChanged(" + fontScale + ") - was = " + origFontScale;
    if (trace_1.isTraceEnabled()) {
        trace_1.writeFontScaleTrace("" + cls);
    }
    internalObservable.set(FontScaleObservable.FONT_SCALE, fontScale);
});
var useAndroidFontScale = profiling_1.profile('useAndroidFontScale', function useAndroidFontScaleImpl() {
    fontScaleChanged(Number(nsApp.android.context.getResources().getConfiguration().fontScale));
});
function setupConfigListener() {
    nsApp.off(nsApp.launchEvent, setupConfigListener);
    var context = nsApp.android && nsApp.android.context;
    if (!context) {
        nsApp.on(nsApp.launchEvent, setupConfigListener);
        return;
    }
    useAndroidFontScale();
    var configChangedCallback = new android.content.ComponentCallbacks2({
        onLowMemory: function () {
        },
        onTrimMemory: function () {
        },
        onConfigurationChanged: function (newConfig) {
            fontScaleChanged(Number(newConfig.fontScale));
        },
    });
    context.registerComponentCallbacks(configChangedCallback);
    nsApp.on(nsApp.resumeEvent, useAndroidFontScale);
}
function ensureObservable() {
    if (internalObservable) {
        return;
    }
    internalObservable = new observable_1.Observable();
    setupConfigListener();
}
var FontScaleObservable = (function (_super) {
    __extends(FontScaleObservable, _super);
    function FontScaleObservable() {
        var _this = _super.call(this) || this;
        _this.fontScale = 1;
        _this.isExtraSmall = false;
        _this.isExtraLarge = false;
        ensureObservable();
        var selfRef = new WeakRef(_this);
        var callback = profiling_1.profile('FontScaleObservable.propertyChangeEvent', function (args) {
            var self = selfRef.get();
            if (self) {
                self.set(args.propertyName, args.value);
                return;
            }
            internalObservable.off(observable_1.Observable.propertyChangeEvent, callback);
        });
        internalObservable.on(observable_1.Observable.propertyChangeEvent, callback);
        _this.set(FontScaleObservable.FONT_SCALE, internalObservable.get(FontScaleObservable.FONT_SCALE));
        _this.set(FontScaleObservable.IS_EXTRA_SMALL, false);
        _this.set(FontScaleObservable.IS_EXTRA_LARGE, false);
        return _this;
    }
    Object.defineProperty(FontScaleObservable, "VALID_FONT_SCALES", {
        get: function () {
            return [0.85, 1, 1.15, 1.3];
        },
        enumerable: true,
        configurable: true
    });
    FontScaleObservable.FONT_SCALE = 'fontScale';
    FontScaleObservable.IS_EXTRA_SMALL = 'isExtraSmall';
    FontScaleObservable.IS_EXTRA_LARGE = 'isExtraSmall';
    return FontScaleObservable;
}(observable_1.Observable));
exports.FontScaleObservable = FontScaleObservable;
//# sourceMappingURL=data:application/json;base64,
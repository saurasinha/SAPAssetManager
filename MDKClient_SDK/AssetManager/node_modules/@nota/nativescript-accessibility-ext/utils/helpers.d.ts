/// <reference path="../ui/core/view.d.ts" />
import { CssProperty, Property, Style } from '@nativescript/core/ui/core/properties';
import { View } from '@nativescript/core/ui/core/view';
import { Page } from '@nativescript/core/ui/page';
export declare function getLastFocusedViewOnPage(page: Page): View | null;
export declare function noop(): void;
export declare function makePropertyEnumConverter<T>(enumValues: any): (value: string) => T;
export interface ViewType<T extends View> {
    new (): T;
}
export declare function setViewFunction(viewClass: any, fnName: string, fn?: Function): void;
export declare function wrapFunction(obj: any, fnName: string, func: Function, objName: string): void;
export declare function unwrapFunction(obj: any, fnName: string, viewName: string): void;
export declare function enforceArray(val: string | string[]): string[];
export declare function inputArrayToBitMask(values: string | string[], map: Map<string, number>): number;
export declare function addPropertyToView<ViewClass extends View, T>(viewClass: ViewType<ViewClass>, name: string, defaultValue?: T, valueConverter?: (value: string) => T): Property<ViewClass, T>;
export declare function addBooleanPropertyToView<ViewClass extends View>(viewClass: ViewType<ViewClass>, name: string, defaultValue?: boolean): Property<ViewClass, boolean>;
export declare function addCssPropertyToView<ViewClass extends View, T>(viewClass: ViewType<ViewClass>, name: string, cssName: string, inherited?: boolean, defaultValue?: T, valueConverter?: (value: string) => T): CssProperty<Style, T>;
export declare function addBooleanCssPropertyToView<ViewClass extends View>(viewClass: ViewType<ViewClass>, name: string, cssName: string, inherited?: boolean, defaultValue?: boolean): CssProperty<Style, boolean>;
export declare const notifyAccessibilityFocusState: (tnsView: View, receivedFocus: boolean, lostFocus: boolean) => void;
export declare function getViewNgCssClassesMap(view: any): Map<string, boolean>;
export interface A11YCssClasses {
    [className: string]: boolean;
}
export interface HmrSafeEventsCallback {
    (...args: any[]): any;
}
export declare function hmrSafeEvents(fnName: string, events: string[], obj: {
    on(eventName: string, cb: HmrSafeEventsCallback): void;
    off(eventName: string, cb: HmrSafeEventsCallback): void;
}, callback: HmrSafeEventsCallback, thisArg?: any): void;
export declare function viewSetCssClasses(view: View, a11yCssClasses: A11YCssClasses): boolean;
